import{_ as s,c as a,b as e,o as n}from"./app-DoHt5aEZ.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h3 id="_1-jsx的事件绑定" tabindex="-1"><a class="header-anchor" href="#_1-jsx的事件绑定"><span>1.JSX的事件绑定</span></a></h3><p>this的基本的四种绑定：</p><ol><li>默认绑定：独立执行 foo();</li><li>隐式绑定：被一个对象执行 obj.foo() -&gt; obj</li><li>显示绑定：bind，call，apply foo.call(&#39;aaa&#39;) -&gt; String(aaa)</li><li>new绑定：new Foo() -&gt; 创建一个新的对象，并且赋值给this</li></ol><p>我们在jsx中常用的绑定：</p><ol><li>bind绑定；</li></ol><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">this.btnClick.bind(this)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>ES6 class fields绑定方式（不常用的）；</li><li>直接传入一个箭头函数（重要）：</li></ol><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()=&gt;console.log(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">)}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  - onClick={()=&gt;this.btnClick()}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数传递： 对于参数传递，只需要了解第三种箭头函数的方法，因为是最方便的</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  -</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(event)=&gt;this.btnClick(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">18</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当使用第一种方式进行多个参数的绑定的时候会有一个问题。比如当btnClick接收的是三个参数的时候。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  btnClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">event</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  onClick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">={</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">this.btnClick.bind(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">18</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候的打印，会将event的打印放在最后age的位置，而event会打印aaa的值，name会打印18 因为我们bind绑定的时候要指定this，但是我们在执行的时候会传过去event，所以就会被放在最后一个参数那里</p></div><h3 id="_2-jsx的条件判断" tabindex="-1"><a class="header-anchor" href="#_2-jsx的条件判断"><span>2.JSX的条件判断</span></a></h3><ul><li>根据条件给变量赋值不同的内容</li><li>三元运算符</li><li>逻辑与运算符 &amp;&amp; （场景：当一个值可能为null或者undefined的时候使用）</li></ul><h3 id="_3-jsx的本质-虚拟dom到真实dom到过程" tabindex="-1"><a class="header-anchor" href="#_3-jsx的本质-虚拟dom到真实dom到过程"><span>3.JSX的本质-虚拟DOM到真实DOM到过程</span></a></h3><p>jsx代码---ReactElement对象（虚拟DOM）---真实DOM</p><p>ReactDOM.render让虚拟DOM和真实DOM同步起来，这个过程中叫做 “协调”</p><blockquote><p>💬 <strong>Q：虚拟DOM有什么作用？</strong><br> 🧠 A：1.可以在js里面快速进行diff算法来判断哪些内容需要更新；2.可以做到跨平台，因为虚拟DOM就是一个js对象，在react里面，还有一个react native的东西，react native就是这样做的，所以我可以选择渲染成web端，也可以选择渲染成移动端；3.帮助我们从命令式编程转到了声明式编程的模式。</p></blockquote>`,17)]))}const p=s(l,[["render",t]]),d=JSON.parse('{"path":"/article/3lmkbvon/","title":"2.JSX的基本语法","lang":"zh-CN","frontmatter":{"title":"2.JSX的基本语法","createTime":"2025/08/15 16:30:54","permalink":"/article/3lmkbvon/"},"readingTime":{"minutes":1.77,"words":530},"git":{"createdTime":1755250319000,"updatedTime":1755529519000,"contributors":[{"name":"wanting you","username":"","email":"wantingyou@wantingdeMac-mini.local","commits":2,"avatar":"https://gravatar.com/avatar/82a48375ef0ebb6022d22cd03630ec69524cbd5b8576628fb0797f2549594275?d=retro"}]},"filePathRelative":"preview/React/2.JSX的基本语法.md","headers":[],"categoryList":[{"id":"5ebeb6","sort":10000,"name":"preview"},{"id":"2b5879","sort":10002,"name":"React"}]}');export{p as comp,d as data};
