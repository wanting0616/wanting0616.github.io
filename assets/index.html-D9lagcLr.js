import{_ as i,c as a,b as e,o as n}from"./app-DoHt5aEZ.js";const t={};function h(l,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h3 id="store" tabindex="-1"><a class="header-anchor" href="#store"><span>Store</span></a></h3><h3 id="action" tabindex="-1"><a class="header-anchor" href="#action"><span>action</span></a></h3><p>Redux要求我们通过action来更新数据：（好处：是可以清晰的知道数据到底发生了什么样的变化，所有的数据变化都是可跟追、可预测的）</p><ul><li>所有数据的变化，必须通过派发（dispatch）action来更新；</li><li>action是一个普通的JavaScript对象，用来描述这次更新的type和content；</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> action1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Change_Name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">wanting</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">store</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">dispatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">action1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer"><span>reducer</span></a></h3><p>reducer是一个纯函数；reducer做的事情就是将传入的state和action结合起来生成一个新的state；</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> reducer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> initState</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">action</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">action</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Change_Name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">action.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> state</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准的store管理目录：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">js</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  ---</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">store</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reducer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">js</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ---</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">reducer和默认store值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">actionCreators</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">js</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ---</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">派发的action</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">constants</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">js</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ---</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> 字符串常量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Redux三大原则：(面试)</p><ul><li>单一数据源。 整个state都被存储在一个store里面，单一的数据源可以让整个应用程序的state变得方便维护、追踪、修改</li><li>State是只读的。 唯一修改State的方法一定是触发action，不要试图在其他地方通过任何的方式来修改State</li><li>使用纯函数来执行修改。 通过reducer将 旧state和 actions联系在一起，并且返回一个新的State</li></ul></div><p>组件中使用：</p><ul><li>componentDidMount生命周期store.subscribe(()=&gt;{})=&gt;this.state =&gt; render</li></ul><p>组件中修改：</p><ul><li>store.dispatch(addNumberAction(num))</li></ul><h3 id="react中的state如何管理" tabindex="-1"><a class="header-anchor" href="#react中的state如何管理"><span>React中的state如何管理</span></a></h3><ul><li>UI相关的组件内部可以维护的状态，在组件内部自己来维护</li><li>大部分需要共享的状态，都交给redux来管理和维护</li><li>从服务器请求的数据（包括请求的操作），交给redux来维护</li></ul>`,17)]))}const p=i(t,[["render",h]]),r=JSON.parse('{"path":"/article/nju0p02n/","title":"9.redux","lang":"zh-CN","frontmatter":{"title":"9.redux","createTime":"2025/08/26 21:42:02","permalink":"/article/nju0p02n/"},"readingTime":{"minutes":1.37,"words":412},"git":{"createdTime":1756220813000,"updatedTime":1756692602000,"contributors":[{"name":"wanting you","username":"","email":"wantingyou@192.168.0.189","commits":2,"avatar":"https://gravatar.com/avatar/e31546a2929f0b775e3b84421df4cc9a6a3213c7a861d719dac34ee148e9c6f8?d=retro"}]},"filePathRelative":"preview/React/9.redux.md","headers":[],"categoryList":[{"id":"5ebeb6","sort":10000,"name":"preview"},{"id":"2b5879","sort":10002,"name":"React"}]}');export{p as comp,r as data};
