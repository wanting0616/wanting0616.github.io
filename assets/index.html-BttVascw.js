import{_ as i,c as t,b as l,o as a}from"./app-DoHt5aEZ.js";const r={};function c(n,e){return a(),t("div",null,e[0]||(e[0]=[l("<p>一面：</p><ul><li>介绍项目，多讲一点项目亮点</li><li>公司主要是用vue2</li><li>项目规模，有没有参与过敏捷开发</li><li>项目周期是多长</li><li>vue2的生命周期</li><li>组件传参，主要问的是父子组件</li><li>vue项目的权限控制</li></ul><p>二面：</p><ul><li>介绍项目中的亮点难点，聊到了ai那个项目有没有开发出高可复用的组件</li><li>vue3比vue2性能提升的地方体现在哪里？ 回答： 1. 响应式系统的优化。原本的Object.defineProperty存在天然缺陷，无法捕捉对象的新增/删除，直接通过数组索引改变值这些变更，只能手动出发Vue.set这种才能触发，而且初始化的时候需要遍历对象的所有属性，对于大型对象会导致启动性能损耗 2. 编译阶段的优化。vue3中对于一些不会更改的静态节点只会创建和渲染一次，渲染更新时，只遍历带标记的动态节点，跳过所有静态节点，减少 diff 过程的比对成本 3. 渲染逻辑的优化。vue2的options API会追踪data中的所有属性，即使某个属性并没有在模版中使用，而vue3中的setup中可以使用ref和reactive，这样在模板或计算属性中被使用时才会建立依赖，减少无效的更新触发。渲染逻辑优化进一步压缩 diff 和更新的成本</li><li>react和vue有什么区别和优势，应该要怎么选择？ 对于大型复杂应用可以使用React，并且对项目成员的技术要求会高一点。Vue可以上手即用，快速迭代，可以应用于中小项目，生态统一。</li><li>对于前端中有些参数需要频繁更改，在开发中是如何去写的，不发版的情况下</li><li>对于页面加载太慢了这种情况要如何性能优化，比如图片，这里还考察到了虚拟列表，说如果要渲染1000条数据要怎么办？</li><li>nexttick的作用？ 答：我们的代码执行内部是有任务队列的，有宏任务队列和微任务队列，宏任务队列只有在微任务队列里面没有待执行的任务时才会执行。vue内部会将nextTick这个函数调用加入到微任务队列的最后,这样就会在其他任务都执行完之后才会执行,就可以实现在DOM更新后再调用了。</li><li>要想实现像工作流那种，比如1-》2-》3这种类似于思维导图要怎么实现？（可以考虑找找插件）</li><li>聊到了git，不同的分支合代码是怎么操作的</li><li>有没有了解过鸿蒙系统</li><li>项目周期是多长</li></ul>",4)]))}const s=i(r,[["render",c]]),u=JSON.parse('{"path":"/article/m3ftz6ls/","title":"1.软通面试","lang":"zh-CN","frontmatter":{"title":"1.软通面试","createTime":"2025/09/03 17:13:56","permalink":"/article/m3ftz6ls/"},"readingTime":{"minutes":2.43,"words":730},"git":{"createdTime":1757860990000,"updatedTime":1757860990000,"contributors":[{"name":"wanting you","username":"","email":"wantingyou@192.168.0.189","commits":1,"avatar":"https://gravatar.com/avatar/e31546a2929f0b775e3b84421df4cc9a6a3213c7a861d719dac34ee148e9c6f8?d=retro"}]},"filePathRelative":"preview/面试/1.软通面试.md","headers":[],"categoryList":[{"id":"5ebeb6","sort":10000,"name":"preview"},{"id":"6264fb","sort":10004,"name":"面试"}]}');export{s as comp,u as data};
